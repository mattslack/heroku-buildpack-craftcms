#!/bin/bash
# Usage: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd)
mkdir -p ${BUILD_DIR} ${CACHE_DIR}

# START CONFIG
# Support end-user configured CRAFT_VERSION, and CRAFT_BUILD
# This way, end-users can choose exactly which versions to run with.

# Set Craft Environment Variables
for KEY in CRAFT_VERSION CRAFT_BUILD; do
	[ -f $ENV_DIR/$KEY ] && export "$KEY=$(cat $ENV_DIR/$KEY)"
done

if [ -z "$CRAFT_VERSION" ]; then
	CRAFT_VERSION=2.6
fi

if [ -z "$CRAFT_BUILD" ]; then
	CRAFT_BUILD=2785
fi

# END CONFIG

CRAFT_URL="http://download.buildwithcraft.com/craft/${CRAFT_VERSION}/${CRAFT_VERSION}.${CRAFT_BUILD}/Craft-${CRAFT_VERSION}.${CRAFT_BUILD}.zip"
CRAFT_DIR="${CACHE_DIR}/Craft-${CRAFT_VERSION}.${CRAFT_BUILD}"

# Download Craft
echo "-----> Installing CraftCMS v${CRAFT_VERSION}.${CRAFT_BUILD}"
if [ ! -d "$CRAFT_DIR" ]; then
	echo "       Downloading new copy of v${CRAFT_VERSION}.${CRAFT_BUILD}"
	cd ${CACHE_DIR}
	curl -ko ./Craft-${CRAFT_VERSION}.${CRAFT_BUILD}.zip --silent --max-time 60 --location ${CRAFT_URL}
	mkdir -p ${CRAFT_DIR}
	cd ${CRAFT_DIR}
	jar xf ../Craft-${CRAFT_VERSION}.${CRAFT_BUILD}.zip
else
	echo "       Installing v${CRAFT_VERSION}.${CRAFT_BUILD} from cache"
fi

# Move Craft
echo "-----> Installing CraftCMS to craft/"
mkdir -p ${BUILD_DIR}/craft
cp -r ${CRAFT_DIR}/craft ${BUILD_DIR}/craft

# Default NGINX Config
echo "-----> Setting up NGINX"
if [ ! -f "$BUILD_DIR/nginx_app.conf" ]; then
	echo "       Installing default nginx_app.conf"
	cp ${BUILDPACK_DIR}/bin/util/nginx_app.conf ${BUILD_DIR}/nginx_app.conf
else
	echo "       Using config in app"
fi

# Default Composer.json
echo "-----> Setting up Composer"
if [ ! -f "$BUILD_DIR/composer.json" ]; then
	echo "       Installing default composer.json"
	cp ${BUILDPACK_DIR}/bin/util/composer.json ${BUILD_DIR}/composer.json
else
	echo "       Using config in app"
fi

# Default Procfile
cd ${BUILD_DIR}

if [[ ! -f "Procfile" ]]; then
	echo "web: bin/start.sh" > Procfile
	notice_inline "No Procfile, using 'web: bin/start.sh'."
fi

# Setup Script
mkdir -p ${BUILD_DIR}/bin
cd ${BUILD_DIR}

if [[ ! -f "./bin/start.sh" ]]; then
	echo "web: bin/start.sh" > Procfile
	notice_inline "No start script, creating bin/start.sh'."
	cat >>bin/start.sh <<EOF
	#!/usr/bin/env bash
	# Write directories if not there
	mkdir -p ./craft/config ./craft/storage ./craft/plugins ./public
	# Write proper directory permissions
	chmod -R 744 craft/{app,config,plugins,storage}
	chmod -R 744 public
	# Start NGINX
	vendor/bin/heroku-php-nginx -C nginx_app.conf public
EOF
fi

chmod +x bin/start.sh
